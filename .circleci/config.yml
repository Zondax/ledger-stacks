version: 2
jobs:
  build:
    docker:
      - image: zondax/circleci:latest
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run: conan config install https://github.com/conan-io/conanclientcert.git
      - run: cmake -DCMAKE_BUILD_TYPE=Debug . && make
      # Unfortunately need to disable leak sanitizer https://github.com/google/sanitizers/issues/916
      # Still run all other ASAN components
      - run: GTEST_COLOR=1 ASAN_OPTIONS=detect_leaks=0 ctest -VV

  build_only_rust:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - run:
          name: rustfmt
          command: |
            cd ~/project/app/rust
            cargo fmt --version
            cargo fmt -- --check
      - run:
          name: clippy
          command: |
            cd ~/project/app/rust
            cargo clippy --version
            cargo clippy --all-features --all-targets || true
      - run:
          name: audit
          command: |
            cd ~/project/app/rust
            cargo audit --version
            cargo audit
      - run:
          name: run tests
          command: |
            cd ~/project/app/rust
            cargo test

  build_ledger:
    docker:
      - image: zondax/builder-bolos:latest
    working_directory: ~/project
    environment:
      BOLOS_SDK: /home/zondax/project/deps/nanos-secure-sdk
      BOLOS_ENV: /opt/bolos
    steps:
      - checkout
      # Docker entrypoint is not considered
      - run: git submodule update --init --recursive
      - run:
          name: Build Standard app
          command: |
            source /home/zondax/.cargo/env
            make

  test_zemu:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: large
    working_directory: ~/repo
    environment:
      BASH_ENV: "/opt/circleci/.nvm/nvm.sh"
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev
      - run:
          name: Install rust
          command: |
            sudo apt-get update
            sudo apt-get install -y cmake binutils-dev libcurl4-openssl-dev libiberty-dev libelf-dev libdw-dev
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path --default-toolchain none -y;
          no_output_timeout: 1800s
      - run:
          name: Install node + yarn
          command: |
            nvm install 14.17.0
            nvm use 14.17.0
            npm install -g yarn
      - run:
          name: Build Ledger app
          command: |
            make clean_build && make buildS
            make clean_build && make buildX
      - run:
          name: Build/Install build js deps
          command: |
            nvm use 14.17.0
            export PATH=~/.cargo/bin:$PATH
            make zemu_install
      - run:
          name: Run zemu tests
          command: |
            nvm use 14.17.0
            export PATH=~/.cargo/bin:$PATH
            make zemu_test

  build_package:
    docker:
      - image: zondax/builder-bolos:latest
    environment:
      BOLOS_SDK: /home/zondax/project/deps/nanos-secure-sdk
      BOLOS_ENV: /opt/bolos
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run:
          name: Build
          command: |
            source /home/zondax/.cargo/env
            cd /home/zondax/project
            make
      - run: /home/zondax/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete $(/home/zondax/project/app/pkg/installer_s.sh version) /home/zondax/project/app/pkg/installer_s.sh

  publish_npm_package:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          name: Build package
          command: |
            cd js
            yarn install
            yarn build
      - run:
          name: Prepare authentication config
          command: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > /home/circleci/.npmrc
      - run:
          name: Set package version
          command: |
            cd js
            export NPM_VERSION=$(echo $CIRCLE_TAG | cut -c5-)
            echo Publishing as "$NPM_VERSION"
            npm --no-git-tag-version version "$NPM_VERSION"
      - run:
          name: Publish package
          command: cd js && npm publish

no-tags: &no-tags
  filters:
    tags:
      ignore: /.*/

only-npm-tags: &only-npm-tags
  filters:
    tags:
      only: /^npm_v[0-9]+(\.[0-9]+)*/
    branches:
      ignore: /.*/

workflows:
  version: 2

  default:
    jobs:
      - build:
          <<: *no-tags
      - build_ledger:
          <<: *no-tags
      - test_zemu:
          <<: *no-tags
      - build_package:
          <<: *no-tags
          requires:
            - build
            - build_ledger
            - test_zemu
          filters:
            branches:
              only:
                - master

  release_npm:
    jobs:
      - publish_npm_package:
          <<: *only-npm-tags
